http://www.topgoer.com/
https://studygoland.com/pkgdoc

一、详细步骤（win）
    1、新建Go目录
    2、环境变量，新建GOPATH （将新建的目录配置）（电脑上有默认值）
    3、在Go目录新建  bin，pkg，src三个文件夹
    4、把Go目录下的bin目录添加到PATH

    go env  查看go相关的环境变量

二、项目目录
    1、个人


    GOPATH - bin（存放编译后的二进制文件）
           - pkg（存放编译后的库文件）
           - src（存放源码文件） - 项目1 - 模块1
                                      - 模块2
                               - 项目2 - 模块1
                                       - 模块2
                               - 项目3 - 模块1
                                       - 模块2

    2、合作架构

    GOPATH     - bin（存放编译后的二进制文件）
               - pkg（存放编译后的库文件）
               - src（存放源码文件） - goland.com  -  小五（作者）- 项目1 - 模块1
                                                                      - 模块2
                                                                      - 模块n
                                                              - 项目2
                                                              - 项目n
                                   - github.com
                                   - gopkg.in
                                   (网站域名)

    3、企业架构

    GOPATH      - bin（存放编译后的二进制文件）
                - pkg（存放编译后的库文件）
                - src（存放源码文件） - goland.com  -  组织架构（后端组）- 项目1    - 模块1
                                                                               - 模块2
                                                                               - 模块n
                                                                    - 项目2
                                                                    - 项目n
                                    - github.com
                                    - gopkg.in
                                    (网站域名)

三、第一个项目   项目打开  在 src 目录下写源码
    一、编译
        1、编译  go build
            在项目下执行
            或者  go bulid github.com/Fover21/goday01/hello
            go build -o 打包名字

        2、go run main.go   像执行脚本文件一样执行go代码
        3、go install       1、先编译的得到一个可执行文件，2、将可执行文件拷贝到GOPATH的bin目录
        4、跨平台编译（交叉编译）
           SET  。。。  不同的操作系统不同-到时候直接查询

    二、let is go
        1、
          // 声明文件 package（关键字）   声明文件属于哪个包， main包-最终会编译成执行可执行文件
          // 用别的包 单独用的 工具类的
          package main

          // 函数外只能放标识符（变量、常量、函数 、类型）的声明

          // 导入语句 双引号
          import "fmt"

          // 程序如果是可编译的必须有func main()  程序的入口  没有参数没有返回值
          func main() {
          	fmt.Println("Hello word")
          }

四、go语言基础
    一、变量和常量
       标识符：
       关键字：go-25
       保留字：go-37

       变量必须先声明再使用
          声明变量： var 名字 数据类型   var s1 string  var age int  var isOk bool
          批量声明
            // go 语言声明非全局变量必须使用,不使用编译不过去
           var (
             name string
             age int
             isOk bool
            )
            声明变量同时赋值   var a sting = "222"
            var s1 string = "who"
            	fmt.Println(s1)
            	// 类型推到
            	var s2 = "how"
            	fmt.Println(s2)
            	// 简单变量声明  只能在函数中使用
            	s3 := "嘿嘿嘿"
            	fmt.Println(s3)
            匿名变量  _  单独下划线

            同一个作用域（{}）中不能重复声明同一个变量
          const
              const pi = 3.1415926
              const (
                a = 1
                b = 2
              )
              // 批量声明后面没指默认与前面一样
              const (
                n1 = 100
                n2
                n3
               )
              // iota
              const (
                a1 = iota // 0
                a2 = iota // 1
                a3        // 2
              )

          iota 实现枚举
            iota 在const关键字出现时被重置为0
            const中每新增一行常量声明，iota累加1

           go fmt main.go  格式化代码
    二、数据类型
        bool  true false
            go语言不允许将整型强制转bool型
        整型
            uint8 16 32 64 无符号整型
            int8 16 32 64  带符号整型
            uintptr  表示执政
        其他进制
            go语言无法定义二进制
            八进制
                var n1 = 0777
            十六进制
                var n2 = 0xff

        浮点型
            float64   32
            go 语言浮点型默认 64
        复数
            complex128 64
        字符串  ""     ``
            不能修改
        byte与rune  类型
            都属于类型别名
            rune int32  4个字节存储

        字符串、字符、字节
            字符串：双引号 ``
            字符：单引号  单个字母、符号、单个文字
            字节：1byte=8bit

            go - utf-8编码  一个常用汉字占三个字节


    三、fmt 占位符
        %T  数据类型
        %v  任何数据
        %#v 加双引号
        %b  二进制
        %d  十进制
        %o  八进制
        %x  十六进制
        %s  字符串
        %c  输出单个字符
        %u  输出无符号十进制数
        %p  获取地址

    四、字符串
        utf-8编码  -  支持中文
        go 语言字符串是双引号包裹
        go 语言单引号包裹的是字符 - 单独的字母、符号、汉字        一个字符=一个字节    一个字节=8位  一个utf-8汉子一般为3个字节
    五、注释
        // 单行注释
        /* */ 多行注释
    六、流程控制
        if
        switch case
        了解-不鼓励使用
            goto  标签   break - continue  也都可以跳到标签
        for
        for range
    七、运算符
        算数运算符  + - * / %
        关系运算符  == !+ > >= < <=
        逻辑运算符  && || !
        位运算
            & 两为均为1才为1
            | 两位有一个1则为1
            ^ 两位不一样则为1
            << 左移N位就是乘以2的N次方
            >> 右移N位就是除以2的N次方
        赋值运算符
            =
            +=
            -=
            *=
            /=
            %=
            <<=
            >>=
            &=
            !=
            ^=
    八、复合数据类型 - 数组
        	/*
                // 数组
                // 存放原始的容器
                // 必须指定存放的元素的类型和容量
                // 数组的长度是数组类型的一部分
                var a1 [3]bool // [true false true]
                var a2 [4]bool // [true false true false]
                var a3 [3]int

                //数组的初始化
                // 如果不舒适化：默认元素都是零值 bool：false 整数浮点：0 字符串：""
                fmt.Println(a1)
                fmt.Println(a2)
                fmt.Println(a3)


                // 1 初始化方式1
                a1 := [3]bool{true, false, true}
                // 2 初始化方式2
                a2 := [3]int{0, 1, 3}
                // 3 根据初始值自动判断数组长度多少
                a3 := [...]int{1, 3, 4, 5}
                // 4 初始化方式3  自动补0
                a4 := [5]int{1, 2}
                // 根据索引
                a5 := [5]int{0: 3, 4: 2, 1: 100}
                fmt.Println(a1)
                fmt.Println(a2)
                fmt.Println(a3)
                fmt.Println(a4)
                fmt.Println(a5)


                // 数组的遍历
                a := [...]string{"a", "bbb", "cccccc"}
                // 1
                for i := 0; i < len(a); i++ {
                    fmt.Println(a[i])
                }
                // 2
                for i, v := range a {
                    fmt.Println(i, v)
                }


                // 多纬数组
                a := [3][2]string{
                    {"北京", "上海"},
                    {"广州", "深圳"},
                    {"成都", "重庆"},
                }
                fmt.Println(a)       //[[北京 上海] [广州 深圳] [成都 重庆]]
                fmt.Println(a[2][1]) //支持索引取值:重庆

                for _, v1 := range a {
                    for _, v2 := range v1 {
                        fmt.Printf("%s\t", v2)
                    }
                    fmt.Println()
                }

                //注意： 多维数组只有第一层可以使用...来让编译器推导数组长度。例如：

                //支持的写法
                a := [...][2]string{
                    {"北京", "上海"},
                    {"广州", "深圳"},
                    {"成都", "重庆"},
                }


        		// 数组是值类型，赋值和传参会复制整个数组。因此改变副本的值，不会改变本身的值。

        		a := [3]int{10, 20, 30}
        		b := a
        		b[0] = 100
        		fmt.Println(a, b) // [10 20 30] [100 20 30]
        			注意：
        			数组支持 “==“、”!=” 操作符，因为内存总是被初始化过的。
        			[n]*T表示指针数组，*[n]T表示数组指针 。
        	*/
    九、切片
        切片（Slice）是一个拥有相同类型元素的可变长度的序列。它是基于数组类型做的一层封装。它非常灵活，支持自动扩容。
        切片是一个引用类型，它的内部结构包含地址、长度和容量。切片一般用于快速地操作一块数据集合。

        切片的定义
            声明切片类型的基本语法如下：
            var name []T
                其中，
                name:表示变量名
                T:表示切片中的元素类型
                var s[] int // 定义一个存放int类型元素的切片
        	var s1 []int    //定义一个存放int元素的切片
        	var s2 []string // 定义一个存放string类型的切片

        	fmt.Println(s1, s2)
        	fmt.Println(s1 == nil) // true

        	// 初始化
        	s1 = []int{1, 2, 4}
        	s2 = []string{"aa", "b", "ccc"}

        	fmt.Println(s1, s2)
        	fmt.Println(s1 == nil) // false
        	// 长度和容量
        	fmt.Println(len(s1), cap(s1))
        	fmt.Printf("%T\n", len(s1))
        	fmt.Printf("%T\n", cap(s1))

        	// 由数组得到切片
        	a1 := [...]int{1, 3, 4, 6, 7}
        	s3 := a1[0:3]
        	s4 := a1[2:]
        	s5 := a1[:]
        	s6 := a1[:2]
        	s7 := a1[1:3]
        	fmt.Println(s3)
        	fmt.Println(s4)
        	fmt.Println(s5)
        	fmt.Println(s6)
        	// 切片的容量是指底层数组的容量  切片的长度就是元素的个数
        	fmt.Println(len(s6), cap(s6)) // 2 5
        	// 底层数组从切片的第一个元素到最后的元素数量
        	fmt.Println(len(s7), cap(s7)) // 1 4
        	// 切片是支持扩容的

        	// 切片再切片
        	s8 := s4[1:]
        	fmt.Println(s4)
        	fmt.Println(s8)
        	fmt.Println(len(s8), cap(s8)) // 2 2
        	fmt.Println(s8)               //[6 7]
        	// 切片是一个引用类型，指向了底层数组，他们有自己的值
        	// 注意： 对切片进行再切片时，索引不能超过原数组的长度，否则会出现索引越界的错误。
        	a1[3] = 10000
        	fmt.Println(s8)               //[10000 7]
        	fmt.Println(len(s8), cap(s8)) // 2 2
        	/*
        			使用make()函数构造切片
        			我们上面都是基于数组来创建的切片，如果需要动态的创建一个切片，我们就需要使用内置的make()函数，格式如下：

        			make([]T, size, cap)
        			其中：

        			T:切片的元素类型
        			size:切片中元素的数量
        			cap:切片的容量
        			举个例子：

        			func main() {
        				a := make([]int, 2, 10)
        				fmt.Println(a)      //[0 0]
        				fmt.Println(len(a)) //2
        				fmt.Println(cap(a)) //10
        			}
        			上面代码中a的内部存储空间已经分配了10个，但实际上只用了2个。 容量并不会影响当前元素的个数，所以len(a)返回2，cap(a)则返回该切片的容量。

        		切片不能直接比较
        			切片之间是不能比较的，我们不能使用==操作符来判断两个切片是否含有全部相等元素。 切片唯一合法的比较操作是和nil比较。 一个nil值的切片并没有底层数组，一个nil值的切片的长度和容量都是0。但是我们不能说一个长度和容量都是0的切片一定是nil，例如下面的示例：

        			var s1 []int         //len(s1)=0;cap(s1)=0;s1==nil
        			s2 := []int{}        //len(s2)=0;cap(s2)=0;s2!=nil
        			s3 := make([]int, 0) //len(s3)=0;cap(s3)=0;s3!=nil
        			所以要判断一个切片是否是空的，要是用len(s) == 0来判断，不应该使用s == nil来判断。

        		切片的赋值拷贝
        			下面的代码中演示了拷贝前后两个变量共享底层数组，对一个切片的修改会影响另一个切片的内容，这点需要特别注意。

        			s1 := make([]int, 3) //[0 0 0]
        			s2 := s1             //将s1直接赋值给s2，s1和s2共用一个底层数组
        			s2[0] = 100
        			fmt.Println(s1) //[100 0 0]
        			fmt.Println(s2) //[100 0 0]
        		切片遍历
        			切片的遍历方式和数组是一致的，支持索引遍历和for range遍历。
        			s := []int{1, 3, 5}
        			for i := 0; i < len(s); i++ {
        				fmt.Println(i, s[i])
        			}
        			for index, value := range s {
        				fmt.Println(index, value)
        			}
        		Go语言的内建函数append()可以为切片动态添加元素。 每个切片会指向一个底层数组，这个数组能容纳一定数量的元素。
        		当底层数组不能容纳新增的元素时，切片就会自动按照一定的策略进行“扩容”，此时该切片指向的底层数组就会更换。“扩容”操作往往发生在append()函数调用时。 举个例子：

        		//append()添加元素和切片扩容   append 必须赋值给原来的变量
        			var numSlice []int
        			for i := 0; i < 10; i++ {
        				numSlice = append(numSlice, i)
        				fmt.Printf("%v  len:%d  cap:%d  ptr:%p\n", numSlice, len(numSlice), cap(numSlice), numSlice)
        			}
        			从上面的结果可以看出
        				append()函数将元素追加到切片的最后并返回该切片。
        				切片numSlice的容量按照1，2，4，8，16这样的规则自动进行扩容，每次扩容后都是扩容前的2倍。
        				append()函数还支持一次性追加多个元素。 例如：

        				var citySlice []string
        				// 追加一个元素
        				citySlice = append(citySlice, "北京")
        				// 追加多个元素
        				citySlice = append(citySlice, "上海", "广州", "深圳")
        				// 追加切片
        				a := []string{"成都", "重庆"}
        				citySlice = append(citySlice, a...)
        				fmt.Println(citySlice) //[北京 上海 广州 深圳 成都 重庆]



        	*/

        	// 切片的本质：一个框，框住了一块连续的内容，只能保存相同类型的数据类型。真正的数据保存在底层数组

        	/*
        		切片的扩容策略
        		可以通过查看$GOROOT/src/runtime/slice.go源码，其中扩容相关代码如下：

        		newcap := old.cap
        		doublecap := newcap + newcap
        		if cap > doublecap {
        			newcap = cap
        		} else {
        			if old.len < 1024 {
        				newcap = doublecap
        			} else {
        				// Check 0 < newcap to detect overflow
        				// and prevent an infinite loop.
        				for 0 < newcap && newcap < cap {
        					newcap += newcap / 4
        				}
        				// Set newcap to the requested cap when
        				// the newcap calculation overflowed.
        				if newcap <= 0 {
        					newcap = cap
        				}
        			}
        		}
        		从上面的代码可以看出以下内容：

        		首先判断，如果新申请容量（cap）大于2倍的旧容量（old.cap），最终容量（newcap）就是新申请的容量（cap）。
        		否则判断，如果旧切片的长度小于1024，则最终容量(newcap)就是旧容量(old.cap)的两倍，即（newcap=doublecap），
        		否则判断，如果旧切片长度大于等于1024，则最终容量（newcap）从旧容量（old.cap）开始循环增加原来的1/4，即（newcap=old.cap,for {newcap += newcap/4}）直到最终容量（newcap）大于等于新申请的容量(cap)，即（newcap >= cap）
        		如果最终容量（cap）计算值溢出，则最终容量（cap）就是新申请容量（cap）。
        		需要注意的是，切片扩容还会根据切片中元素的类型不同而做不同的处理，比如int和string类型的处理方式就不一样。

        		使用copy()函数复制切片
        		首先我们来看一个问题：

        		func main() {
        			a := []int{1, 2, 3, 4, 5}
        			b := a
        			fmt.Println(a) //[1 2 3 4 5]
        			fmt.Println(b) //[1 2 3 4 5]
        			b[0] = 1000
        			fmt.Println(a) //[1000 2 3 4 5]
        			fmt.Println(b) //[1000 2 3 4 5]
        		}
        		由于切片是引用类型，所以a和b其实都指向了同一块内存地址。修改b的同时a的值也会发生变化。

        		Go语言内建的copy()函数可以迅速地将一个切片的数据复制到另外一个切片空间中，copy()函数的使用格式如下：

        		copy(destSlice, srcSlice []T)
        		其中：

        		srcSlice: 数据来源切片
        		destSlice: 目标切片
        		举个例子：

        		func main() {
        			// copy()复制切片
        			a := []int{1, 2, 3, 4, 5}
        			c := make([]int, 5, 5)
        			copy(c, a)     //使用copy()函数将切片a中的元素复制到切片c
        			fmt.Println(a) //[1 2 3 4 5]
        			fmt.Println(c) //[1 2 3 4 5]
        			c[0] = 1000
        			fmt.Println(a) //[1 2 3 4 5]
        			fmt.Println(c) //[1000 2 3 4 5]
        		}

        		从切片中删除元素
        		Go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。 代码如下：

        		func main() {
        			// 从切片中删除元素
        			a := []int{30, 31, 32, 33, 34, 35, 36, 37}
        			// 要删除索引为2的元素
        			a = append(a[:2], a[3:]...) // ...表示拆开
        			fmt.Println(a) //[30 31 33 34 35 36 37]
        		}
        		总结一下就是：要从切片a中删除索引为index的元素，操作方法是a = append(a[:index], a[index+1:]...)

                func main() {
                	var a = make([]string, 5, 10)
                	for i := 0; i < 10; i++ {
                		a = append(a, fmt.Sprintf("%v", i))
                	}
                	fmt.Println(a) // 【0，0，0，0，0，1，2，3，4，5，6，7，8，9】
                }

        	*/
    十、指针
        & ：取地址
        * ：取地址对应的值
        这两个操作是互补操作
        指针变量的值是一个地址

        在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。
        而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。
            new是用来创造指针的
            new是一个内置的函数，它的函数签名如下：

            func new(Type) *Type
                其中，

                Type表示类型，new函数只接受一个参数，这个参数是一个类型
                *Type表示类型指针，new函数返回一个指向该类型内存地址的指针。
                new函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。
            make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；
        new与make的区别
            1、二者都是用来做内存分配的。
            2、make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；
            3、而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。一般给基本数据类型申请
        元素为map类型的切片
        值为切片类型的map

        slice和map都需要左初始化
        元素为map类型的切片
        下面的代码演示了切片中的元素为map类型时的操作：

        func main() {
        	var mapSlice = make([]map[string]string, 3)
        	for index, value := range mapSlice {
        		fmt.Printf("index:%d value:%v\n", index, value)
        	}
        	fmt.Println("after init")
        	// 对切片中的map元素进行初始化
        	mapSlice[0] = make(map[string]string, 10)
        	mapSlice[0]["name"] = "小王子"
        	mapSlice[0]["password"] = "123456"
        	mapSlice[0]["address"] = "沙河"
        	for index, value := range mapSlice {
        		fmt.Printf("index:%d value:%v\n", index, value)
        	}
        }

        值为切片类型的map
        下面的代码演示了map中值为切片类型的操作：

        func main() {
        	var sliceMap = make(map[string][]string, 3)
        	fmt.Println(sliceMap)
        	fmt.Println("after init")
        	key := "中国"
        	value, ok := sliceMap[key]
        	if !ok {
        		value = make([]string, 0, 2)
        	}
        	value = append(value, "北京", "上海")
        	sliceMap[key] = value
        	fmt.Println(sliceMap)
        }
    十一、函数
        go 语言传递的参数都是副本（值）

        函数内部没有办法声明带名字的函数    匿名函数可以

        闭包：是一个函数，这个函数包含了他外部作用域的一个变量
            底层原理：函数可以作为返回值，函数内部查找的顺序，先在自己内部找，找不到往外层找
            闭包 = 函数 + 外部变量的引用
    十二、结构体
        基本数据类型：只能保存一个值
        结构体：可以保存多个纬度的数据
        编程：代码解决现实生活中的问题

        结构体是值类型
            type person struck {
                name, sex string
            }

        构造函数     - 返回值是对应的结构体类型   （构造函数也是函数没有什么不同）
        func newPerson(n string s string) person {
            return person{name :n, sex: s,}
        }

        方法和接收者
            方法是有接收者的函数
            接收者值的是哪个类型的变量可以调用这个函数  （接收者可以是指针）

            方法：
                type person struck {
                    name string
                    age int
                }
                p1 := person("a", 18)
                // 接收者用对应类型的首字母小写
                // 指定了接收者之后，只有接收者这个类型的变量才能调用这个方法
                func (p person) dream() {
                    fmt.Printf("%s", p.name)
                }
                p1.dream()

                func (p person) dream(str string) {
                    fmt.Printf("%s - %s", p.name, str)
                    // p 是副本
                }
                p1.dream("你好")

                // 接收者为指针  (person类型的指针)
                func (p *person) dream() {
                    p.age++
                    fmt.Printf("%s", p.name)
                }
                // 修改结构体变量的值
                p1.dream()

                指针接收者
                    1、需要修改结构体变量的值时要使用指针接收者
                    2、结构体本身比较大，拷贝的内容开销比较大时也要使用指针接收者
                    3、保持一致性：如果有一个方法使用了指针接收者，其他的方法为了统一也要使用指针接收者



        匿名结构体
            用于零时场景只用一次
            var a = struct {name string age int}("ward", 18)
        嵌套结构体
            匿名嵌套    有查找优先级 - 结构体的匿名字段
        结构体的继承
        结构体与json
            * 1、结构体内部的字段要大些，不大写别人访问不到。2、
            把go语言中的结构体变量转换为 json格式字符串
            json 转 go结构体
            import "encoding/json"
            // 序列化
            b, err := json.Marshal(结构体)
            if err != nil { return }
            type person struck {
                Name string `json: "name", db: "name", ini: "name"`
                Sex string
            }
            // 反序列化
            str := `{"name": "ward", "age": 18}`
            var p2 person
            json.Unmarshal([]byte(str), &p2) // 传指针是为了在json.Unmarshal内部修改p2的值

            * 经常出现的问题
                1、结构体内部的字段首字母要大写@！！！不大写别人是访问不到的
                2、反序列化时要传递指针

        自定义类型和类型别名
            type MyInt int // 自定义类型
            type newInt = int //类型别名
            类型别名只在代码编写 过程中有效，编译完之后就不存在，内置的byte和rune 都属于类型别名

    十三、接口  interface
        接口是一种类型  一种抽象的类型     接口就是你要实现的方法的清单
        在编程中会遇到以下场景
            我不关心一个变量什么类型，我只关系能调用他的什么方法。

        // 引出接口的实例

        type cat struct {}

        type dog struct {}

        func (c cat) speak() {}

        func (d dog) speak() {}

        func da(x ?){
            // 接收一个参数，传递进来什么就打什么
            x.speak()
        }

        // 接口


        package main

        import "fmt"

        type cat struct{}

        type dog struct{}

        func (c cat) speak() {
        	fmt.Println("cc")
        }

        func (d dog) speak() {
        	fmt.Println("dd")
        }

        // 接口的定义
        type speaker interface {
            // 方法名1(参数1， 参数2， 。。。) (返回值1， 返回值2， 。。。)
            // 方法名2(参数1， 参数2， 。。。) (返回值1， 返回值2， 。。。)
        	speak() // 只要实现了speak方法的变量都是speaker类型  //方法签名
        }
        // 接口使用  - 用来给变量，参数，返回值等设置指定类型
        func da(x speaker) {
        	x.speak()
        }
        // 接口的实现
        // 一个变量如果实现了接口中规定的所有的方法，那么这个变量就是实现了这个接口，可以称为这个接口类型的变量。

        func main() {
        	c1 := cat{}
        	d1 := dog{}
        	da(c1)
        	da(d1)
        	var ss speaker //定义一个接口类型的变量
        	ss = c1
        }
        指针接收者实现接口

        空接口  - 任何类型都实现了这个接口
        type x interface {}
        // 所有的类型都实现了空接口，也就是任意类型的变量都能保存到空接口中  fmt.Print
        interface {}  通常没有必要起名字  - 一般这么用  -

        var m1 = map[string]interface{}
        m1 = make(map[string]interface{}, 16)

        类型断言
            x.(T)
            做类型断言的前提是一定要是一个接口类型的变量

        接口底层
            动态类型
            动态值


    十四、包 package
        包的路径重GOPATH/src后的路径开始写起，用分隔符 /
        想被别的包调用的标识符都要首字母大写
        单行导入和多行导入
        导入包的时候可以用别名
        导入包不想用包内部的标识符，需要使用匿名导入 _
        没个包导入的时候会自动执行一个名为 init() 的函数，他没有参数也没有返回值也不能手动调用
        Go不支持循环导入
        多个包中都定义了init 执行顺序
            main     -> A     -> B     -> C
            initmain <- initA <- initB <- initC()

    十五、文件操作
        打开和关闭文件
        读文件
        写文件

        os
        bufio
        ioutil

        日志库
            往不同的地方输出日志
            日志级别
            日志支持开关控制
            完整日志记录包含时间行号文件名日志级别日志信息
            日志文件要切割

    十六、反射

    十七、并发
        goroutine
            GMP  goroutine的调度模型
            m:n 把m个goroutine分配给n个操作系统线程去执行
            goroutine初始占的大小是2k

            程序启动的时候会自动创建一个goroutine去执行main函数，main函数结束，程序结束，由程序启动的其他goroutine都结束
            sync.WaitGroup
                var wg sync.WaitGroup
                wg.Add()
                wg.Done()
                wg.Wait()
        channel
            goroutine是go程序并发的执行体，channel就是他们之间的链接。  通过通信共享内存
            队列  先进先出
            声明   var 变量 chan 元素类型   // 需要指定通道中元素的类型   是引用类型  make开辟内存

            b = make(chan int) // 不带缓冲区通道的初始化
            b = make(chan int, 16) // 带缓冲区通道的初始化

            操作：  <-
                发送值： ch1 <- 1
                接收值： x:= <- ch1
                关闭： close(ch)




如何判断一个链表有没有闭环

一个走一步一个走两步，相遇了就有闭环

// ListNode Definition for singly-linked list.
type ListNode struct {
    Val  int
    Next *ListNode
}

func hasCycle(head *ListNode) bool {
    if head != nil {
        slow := head
        fast := head
        for fast != nil && fast.Next != nil {
            slow = slow.Next
            fast = fast.Next.Next
            if slow == fast {
                return true
            }
        }
    }
    return false
}
